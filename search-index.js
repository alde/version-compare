var searchIndex = {};
searchIndex["version_compare"] = {"doc":"A rust library to easily compare version numbers, and test them against various comparison operators.","items":[[0,"comp_op","version_compare","Module with all supported comparison operators.",null,null],[4,"CompOp","version_compare::comp_op","Enum of supported comparison operators.",null,null],[13,"Eq","","Equal (`==`). When version `A` is equal to `B`.",0,null],[13,"Ne","","Not equal (`!=`). When version `A` is not equal to `B`.",0,null],[13,"Lt","","Less than (`<`). When version `A` is less than `B` but not equal.",0,null],[13,"Le","","Less or equal (`<=`). When version `A` is less than or equal to `B`.",0,null],[13,"Ge","","Greater or equal (`>=`). When version `A` is greater than or equal to `B`.",0,null],[13,"Gt","","Greater than (`>`). When version `A` is greater than `B` but not equal.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"compop"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"compop"}],"output":{"name":"bool"}}],[11,"from_sign","","Get a comparison operator by it's sign. Whitespaces are stripped from the sign string. An error is returned if the sign isn't recognized.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_name","","Get a comparison operator by it's name. Names are case-insensitive, and whitespaces are stripped from the string. An error is returned if the name isn't recognized.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_ord","","Get the comparison operator from Rusts `Ordering` enum.",0,{"inputs":[{"name":"ordering"}],"output":{"name":"compop"}}],[11,"name","","Get the name of this comparison operator.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_inverted","","Covert to the inverted comparison operator.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"invert","","Get the inverted comparison operator.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"as_opposite","","Convert to the opposite comparison operator.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"opposite","","Get the opposite comparison operator.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"as_flipped","","Convert to the flipped comparison operator.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"flip","","Get the flipped comparison operator.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sign","","Get the sign for this comparison operator.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"factor","","Get a factor (number) for this comparison operator. These factors can be useful for quick calculations.",0,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"ord","","Get Rust's ordering for this comparison operator.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"version","version_compare","Version module, which provides the `Version` struct as parsed version representation.",null,null],[3,"Version","version_compare::version","Version struct, which is a representation for a parsed version string.",null,null],[11,"from","","Create a `Version` instance from a version string.",1,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"from_manifest","","Create a `Version` instance from a version string with the given `manifest`.",1,{"inputs":[{"name":"str"},{"name":"versionmanifest"}],"output":{"name":"option"}}],[11,"manifest","","Get the version manifest, if available.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_manifest","","Check whether this version has a manifest.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_manifest","","Set the version manifest.",1,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"as_str","","Get the original version string.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"part","","Get a specific version part by it's `index`. An error is returned if the given index is out of bound.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"parts","","Get a vector of all version parts.",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"part_count","","Get the number of parts in this version string.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"compare","","Compare this version to the given `other` version.",1,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"compop"}}],[11,"compare_to","","Compare this version to the given `other` version, and check whether the given comparison operator is valid.",1,{"inputs":[{"name":"self"},{"name":"version"},{"name":"compop"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[0,"version_compare","version_compare","Version compare module, with useful static comparison methods.",null,null],[3,"VersionCompare","version_compare::version_compare","The main library structure, which provides various static methods for easy version comparison.",null,null],[11,"compare","","Compare two version number strings to each other. This compares version `a` to version `b`, and returns whether version `a` is greater, less or equal to version `b`.",2,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"compare_to","","Compare two version number strings to each other and check whether the given comparison `operator` is valid.",2,{"inputs":[{"name":"str"},{"name":"str"},{"name":"compop"}],"output":{"name":"result"}}],[0,"version_manifest","version_compare","Module for the version manifest.",null,null],[3,"VersionManifest","version_compare::version_manifest","Version manifest (configuration).",null,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"versionmanifest"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"versionmanifest"}],"output":{"name":"bool"}}],[11,"new","","Constructor.",3,{"inputs":[],"output":{"name":"self"}}],[11,"max_depth","","The maximum depth of a version number. None if no depth is configured.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_depth_number","","The maximum depth of a version number as numerical value. Zero is returned if no depth is configured.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_max_depth","","Set the maximum depth of a version number.",3,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_max_depth_number","","Set the maximum depth of a version number. Use zero to disable the maximum depth.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_max_depth","","Check whether there's a maximum configured depth.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ignore_text","","Check whether to ignore text parts in version numbers.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_ignore_text","","Set whether to ignore text parts.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[0,"version_part","version_compare","Version part module.",null,null],[4,"VersionPart","version_compare::version_part","Enum of version string parts.",null,null],[13,"Number","","Numeric part, most common in version strings. Holds the numerical value.",4,null],[13,"Text","","A text part. These parts usually hold text with an yet unknown definition. Holds the string slice.",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"versionpart"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"versionpart"}],"output":{"name":"bool"}}]],"paths":[[4,"CompOp"],[3,"Version"],[3,"VersionCompare"],[3,"VersionManifest"],[4,"VersionPart"]]};
initSearch(searchIndex);
